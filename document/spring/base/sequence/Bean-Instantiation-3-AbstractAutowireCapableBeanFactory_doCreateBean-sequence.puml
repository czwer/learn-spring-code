@startuml

autonumber

-> AbstractAutowireCapableBeanFactory: doCreateBean() : bean实例化
activate AbstractAutowireCapableBeanFactory #DarkSalmon

    note right of AbstractAutowireCapableBeanFactory #FAEBD7
        *介绍doCreateBean进行创建Bean实例的主要步骤
        ---这里只描述了主要步骤
    end note

    alt 不能从缓存获取BeanWrapper时
        note right of AbstractAutowireCapableBeanFactory #aqua
            主要逻辑：
                优先从缓存中获取BeanWrapper,获取不到再创建有四种创建方式
                    a.Supplier.get();
                        ---Java8新语法
                    b.bean定义中声明的工厂方法实例化；
                    c.自动装配：可以理解为用最符合要求的构造函数去实例化；
                    d.无参的构造函数实例化；
                ---这四种可以理解为在new个对象(大部分属性还待填充)
        end note
        AbstractAutowireCapableBeanFactory-> AbstractAutowireCapableBeanFactory: createBeanInstance() : 创建BeanWrapper
        activate AbstractAutowireCapableBeanFactory #DarkSalmon
        deactivate AbstractAutowireCapableBeanFactory
    end

    alt 未经过MergedBeanDefinitionPostProcessor处理
        AbstractAutowireCapableBeanFactory-> AbstractAutowireCapableBeanFactory:applyMergedBeanDefinitionPostProcessors()
        activate AbstractAutowireCapableBeanFactory #DarkSalmon
            note right of AbstractAutowireCapableBeanFactory #aqua
            主要逻辑：
                运用MergedBeanDefinitionPostProcessor类型BeanPostProcessor
                    a.CommonAnnotationBeanPostProcessor
                        ---@PostConstruct,@PreDestroy,@WebServiceRef,@EJB,@Resource
                    b.AutowiredAnnotationBeanPostProcessor
                        ---@Autowired
                    c.RequiredAnnotationBeanPostProcessor---未做处理
                    d.ApplicationListenerDetector---记录当前bean是否单例
                ---为bean实例属性填充做准备：检查是否有注解，验证使用是否正确，标记结果
            end note
            loop
                AbstractAutowireCapableBeanFactory -> MergedBeanDefinitionPostProcessor:postProcessMergedBeanDefinition()
                activate MergedBeanDefinitionPostProcessor #DarkSalmon
                MergedBeanDefinitionPostProcessor --> AbstractAutowireCapableBeanFactory
                deactivate MergedBeanDefinitionPostProcessor
            end
        deactivate AbstractAutowireCapableBeanFactory
    end

    alt 提前暴露未填充属性的Bean
        AbstractAutowireCapableBeanFactory-> DefaultSingletonBeanRegistry: addSingletonFactory() : 放入缓存中，提前暴露出去
        activate DefaultSingletonBeanRegistry #DarkSalmon
        DefaultSingletonBeanRegistry -> AbstractAutowireCapableBeanFactory
        deactivate DefaultSingletonBeanRegistry
    end

    AbstractAutowireCapableBeanFactory-> AbstractAutowireCapableBeanFactory: populateBean() :
    activate AbstractAutowireCapableBeanFactory #DarkSalmon

        note right of AbstractAutowireCapableBeanFactory #aqua
            主要逻辑：
                运用InstantiationAwareBeanPostProcessor类型BeanPostProcessor
                    a.ImportAwareBeanPostProcessor---未做实质处理
                    b.InfrastructureAdvisorAutoProxyCreator---未做实质处理
                    c.CommonAnnotationBeanPostProcessor---未做实质处理
                    d.AutowiredAnnotationBeanPostProcessor---未做实质处理
                    e.RequiredAnnotationBeanPostProcessor---未做实质处理
                ---提供的扩展点，自动装配开始之前，对给定的bean实例执行自定义字段注入回调。
        end note

        loop
            AbstractAutowireCapableBeanFactory -> InstantiationAwareBeanPostProcessor:postProcessAfterInstantiation()
            activate InstantiationAwareBeanPostProcessor #DarkSalmon
            InstantiationAwareBeanPostProcessor --> AbstractAutowireCapableBeanFactory
            deactivate InstantiationAwareBeanPostProcessor
        end

        note right of AbstractAutowireCapableBeanFactory #aqua
            主要逻辑：
                运用InstantiationAwareBeanPostProcessor类型BeanPostProcessor
                    a.ImportAwareBeanPostProcessor---只是对EnhancedConfiguration类型bean注入BeanFactory
                    b.InfrastructureAdvisorAutoProxyCreator---未做实质处理
                    c.CommonAnnotationBeanPostProcessor---实现注解语义
                    d.AutowiredAnnotationBeanPostProcessor---实现注解语义
                    e.RequiredAnnotationBeanPostProcessor---记录验证通过的
                ---bean属性中需要Spring填充或验证处理
        end note

        loop
            AbstractAutowireCapableBeanFactory -> InstantiationAwareBeanPostProcessor:postProcessPropertyValues()
            activate InstantiationAwareBeanPostProcessor #DarkSalmon
            InstantiationAwareBeanPostProcessor --> AbstractAutowireCapableBeanFactory
            deactivate InstantiationAwareBeanPostProcessor
        end

        AbstractAutowireCapableBeanFactory-> AbstractAutowireCapableBeanFactory: checkDependencies()
        activate AbstractAutowireCapableBeanFactory #DarkSalmon
        deactivate AbstractAutowireCapableBeanFactory

        note right of AbstractAutowireCapableBeanFactory #aqua
            通过BeanWrapperImpl给其他属性赋值
        end note
        AbstractAutowireCapableBeanFactory-> AbstractAutowireCapableBeanFactory: applyPropertyValues()
        activate AbstractAutowireCapableBeanFactory #DarkSalmon
        deactivate AbstractAutowireCapableBeanFactory

    deactivate AbstractAutowireCapableBeanFactory


    AbstractAutowireCapableBeanFactory-> AbstractAutowireCapableBeanFactory: initializeBean()
    activate AbstractAutowireCapableBeanFactory #DarkSalmon

        note right of AbstractAutowireCapableBeanFactory #aqua
            对实现BeanNameAware，BeanClassLoaderAware，BeanFactoryAware接口注入相应资源
        end note
        AbstractAutowireCapableBeanFactory-> AbstractAutowireCapableBeanFactory: invokeAwareMethods()
        activate AbstractAutowireCapableBeanFactory #DarkSalmon
        deactivate AbstractAutowireCapableBeanFactory

        AbstractAutowireCapableBeanFactory-> AbstractAutowireCapableBeanFactory: applyBeanPostProcessorsBeforeInitialization()
        activate AbstractAutowireCapableBeanFactory #DarkSalmon
            note right of AbstractAutowireCapableBeanFactory #aqua
                大部分是注入资源或什么也不做，做事情的是以下这个：
                    a.InitDestroyAnnotationBeanPostProcessor---调用标注@PostConstruct的方法
            end note

            loop
                AbstractAutowireCapableBeanFactory -> BeanPostProcessor:postProcessBeforeInitialization()
                activate BeanPostProcessor #DarkSalmon
                BeanPostProcessor --> AbstractAutowireCapableBeanFactory
                deactivate BeanPostProcessor
            end

        deactivate AbstractAutowireCapableBeanFactory

        note right of AbstractAutowireCapableBeanFactory #aqua
            调用实现了InitializingBean接口的afterPropertiesSet方法或自定义的初始化方法
        end note
        AbstractAutowireCapableBeanFactory-> AbstractAutowireCapableBeanFactory: invokeInitMethods()
        activate AbstractAutowireCapableBeanFactory #DarkSalmon
        deactivate AbstractAutowireCapableBeanFactory

        AbstractAutowireCapableBeanFactory-> AbstractAutowireCapableBeanFactory: applyBeanPostProcessorsAfterInitialization()
        activate AbstractAutowireCapableBeanFactory #DarkSalmon
            note right of AbstractAutowireCapableBeanFactory #aqua
                大部分是注入资源或什么也不做，做事情的是以下几个：
                    <font color=red>a.InfrastructureAdvisorAutoProxyCreator---生成代理对象</font>
                        <font color=red>---单独时序图描述,实际上委托给AbstractAutoProxyCreator处理</font>
                    b.MethodValidationPostProcessor：
                        ---支持@Validated，运行时实现校验语义
                        Advisor组件：DefaultPointcutAdvisor
                        Advice组件：MethodValidationInterceptor
                        Pointcut组件：AnnotationMatchingPointcut
                    c.PersistenceExceptionTranslationPostProcessor：
                        ---转换数据库异常，即使不使用Spring事务，只要DAO层标注
                        了@Repository，运行时也可以使用数据层异常转换体系
                        Advisor组件：PersistenceExceptionTranslationAdvisor
                        Advice组件：PersistenceExceptionTranslationInterceptor
                        Pointcut组件：AnnotationMatchingPointcut
                    d.ApplicationListenerDetector：必要时bean加入到监听体系
            end note

            loop
                AbstractAutowireCapableBeanFactory -> BeanPostProcessor:postProcessAfterInitialization()
                activate BeanPostProcessor #DarkSalmon
                    note right of BeanPostProcessor #FF5000
                        Spring生成代理对象的入口之一
                        ---常用
                    end note
                BeanPostProcessor --> AbstractAutowireCapableBeanFactory
                deactivate BeanPostProcessor
            end

        deactivate AbstractAutowireCapableBeanFactory

    deactivate AbstractAutowireCapableBeanFactory

    note right of AbstractAutowireCapableBeanFactory #aqua
        如已提前暴露未填充属性的Bean，则原来的引用指向现在创建好的bean地址
    end note

    AbstractAutowireCapableBeanFactory-> DefaultSingletonBeanRegistry: registerDisposableBean()
    activate DefaultSingletonBeanRegistry #DarkSalmon
    DefaultSingletonBeanRegistry --> AbstractAutowireCapableBeanFactory
    deactivate DefaultSingletonBeanRegistry

<--AbstractAutowireCapableBeanFactory: bean
deactivate AbstractAutowireCapableBeanFactory

note right of AbstractAutowireCapableBeanFactory #FAEBD7
    *总结
        1.创建的bean，通过BeanWrapper包装，然后属性填充，两种填充方式：
            a.BeanPostProcessor来填充及校验属性
            b.BeanWrapper通过DataBind方式填充数据；
        2.初始化实例一般会通过SimpleInstantiationStrategy进行实例化：普通的反射方式或Cglib生成子类方式；
            ---Cglib不仅在AOP动态代理中使用，对象实例化也用到了
        3.对象初始化完成后，再通过BeanPostProcessor，在已有的Advisor中是否存在符合应用当前bean的
            Advisor，存在时生成代理对象。
            ---BeanPostProcessor是通往AOP的桥梁
    *备注
        不要混淆以下方法，看起来长的像：
            postProcessBeforeInstantiation：实例化前处理
            postProcessBeforeInitialization：初始化前处理
            postProcessAfterInstantiation：实例后处理
            postProcessAfterInitialization：初始化后处理

end note

@enduml