@startuml

autonumber

-> JdkDynamicAopProxy: getProxy() : 生成代理对象

note left of JdkDynamicAopProxy #FAEBD7
    *介绍JdkDynamicAopProxy生成代理过程
        ---这里只描述了主要步骤
    单元测试参：JdkDynamicProxyTests
end note
activate JdkDynamicAopProxy #DarkSalmon


    JdkDynamicAopProxy-> AopProxyUtils:completeProxiedInterfaces()
    activate AopProxyUtils #DarkSalmon
        note right of JdkDynamicAopProxy #aqua
            获得实现的接口,
                ---在生成JDK代理时，如果接口没有在SpringProxy，Advised，DecoratingProxy族中，
                会添加这3个接口
        end note
    AopProxyUtils-> JdkDynamicAopProxy:Class<?>[] proxiedInterfaces
    deactivate AopProxyUtils

    JdkDynamicAopProxy-> JdkDynamicAopProxy:findDefinedEqualsAndHashCodeMethods()
    activate JdkDynamicAopProxy #DarkSalmon
        note right of JdkDynamicAopProxy #aqua
            判断接口定义中是否包含equals与hashCode方法
                ---如果没有，Spring帮我们重写这两个方法，防止只重写其一
        end note
    deactivate JdkDynamicAopProxy

    JdkDynamicAopProxy-> Proxy:newProxyInstance()
    activate Proxy #DarkSalmon
        note right of Proxy #aqua
            使用JDK生成代理
        end note
    Proxy-> JdkDynamicAopProxy:proxyObject
    deactivate Proxy


<-- JdkDynamicAopProxy : proxyObject
deactivate JdkDynamicAopProxy

note right of JdkDynamicAopProxy #FAEBD7
*总结
    1.JDK动态代理，可以看成JDK提供的的有限生成字节码的技术。与Cglib一样是都是生成字节码。
    2.SpringAOP中JdkDynamicAopProxy在设置代理对象时把自己(本身包含AdvisedSupport，包含了需要的信息)给设置进去了，比较有趣。
end note

@enduml