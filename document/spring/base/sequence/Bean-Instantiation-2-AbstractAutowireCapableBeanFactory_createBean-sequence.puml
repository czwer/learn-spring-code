@startuml

autonumber

-> AbstractAutowireCapableBeanFactory: createBean()
activate AbstractAutowireCapableBeanFactory #DarkSalmon
    note right of AbstractAutowireCapableBeanFactory #FAEBD7
        *介绍createBean进行创建Bean的主要步骤
        ---这里只描述了主要步骤
    end note

    AbstractAutowireCapableBeanFactory -> AbstractBeanFactory: resolveBeanClass():解析当前bean的Class
    activate AbstractBeanFactory #DarkSalmon
    AbstractBeanFactory -->AbstractAutowireCapableBeanFactory: class
    deactivate AbstractBeanFactory

    AbstractAutowireCapableBeanFactory -> AbstractBeanDefinition: prepareMethodOverrides():校验配置的覆盖方法
    activate AbstractBeanDefinition #DarkSalmon
    AbstractBeanDefinition -->AbstractAutowireCapableBeanFactory
    deactivate AbstractBeanDefinition

    alt

        AbstractAutowireCapableBeanFactory -> AbstractAutowireCapableBeanFactory: resolveBeforeInstantiation():如条件允许，通过BeanPostProcessors返回代理
        activate AbstractAutowireCapableBeanFactory #DarkSalmon

        note right of AbstractAutowireCapableBeanFactory #aqua
            当同时满足以下条件时，生成代理bean
                1.当beforeInstantiationResolved为true时，在bean定义中需要特殊指定，一般为false
                    ---所以不常用
                2.当前bean定义非合成的，且上下文存在InstantiationAwareBeanPostProcessor
                3.已确定最终生成bean的Class
        end note

        AbstractAutowireCapableBeanFactory -> AbstractAutowireCapableBeanFactory: applyBeanPostProcessorsBeforeInstantiation():
        activate AbstractAutowireCapableBeanFactory #DarkSalmon

            loop
                AbstractAutowireCapableBeanFactory -> InstantiationAwareBeanPostProcessor:postProcessBeforeInstantiation()
                activate InstantiationAwareBeanPostProcessor #DarkSalmon
                    note right of InstantiationAwareBeanPostProcessor #FF5000
                        Spring生成代理对象的入口之一
                            ---不常用
                    end note
                InstantiationAwareBeanPostProcessor --> AbstractAutowireCapableBeanFactory:object
                deactivate InstantiationAwareBeanPostProcessor
            end
        deactivate AbstractAutowireCapableBeanFactory

        AbstractAutowireCapableBeanFactory -> AbstractAutowireCapableBeanFactory: applyBeanPostProcessorsAfterInitialization():
        activate AbstractAutowireCapableBeanFactory #DarkSalmon
            loop
                AbstractAutowireCapableBeanFactory -> BeanPostProcessor:postProcessAfterInitialization()
                activate BeanPostProcessor #DarkSalmon
                BeanPostProcessor --> AbstractAutowireCapableBeanFactory:object
                deactivate BeanPostProcessor
            end
        deactivate AbstractAutowireCapableBeanFactory

        deactivate AbstractAutowireCapableBeanFactory

    else

        note right of AbstractAutowireCapableBeanFactory #FF5000
            单独描述doCreateBean()时序图,因其比较复杂，里面也有Spring生成代理的逻辑
        end note
        AbstractAutowireCapableBeanFactory -> AbstractAutowireCapableBeanFactory: doCreateBean():如果未能创建代理bean，则进行实例化
        activate AbstractAutowireCapableBeanFactory #DarkSalmon
        deactivate AbstractAutowireCapableBeanFactory
    end

<-- AbstractAutowireCapableBeanFactory : 实例化后的bean
deactivate AbstractAutowireCapableBeanFactory

    note right of AbstractAutowireCapableBeanFactory #FAEBD7
        *总结
            产生的对象分两种：
                1.首先尝试生成代理后的对象，如果生成直接返回给调用方；
                ---在这里生成代理的方式不常用，常用的是postProcessAfterInitialization方式
                2.实例化对象；
    end note

@enduml