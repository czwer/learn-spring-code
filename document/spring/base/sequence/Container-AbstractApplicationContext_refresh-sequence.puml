@startuml

autonumber

-> AbstractApplicationContext: refresh() : 代理对象方法调用
activate AbstractApplicationContext #DarkSalmon

    note right of AbstractApplicationContext #FAEBD7
        *介绍AbstractApplicationContext.refresh()主要步骤
        ---这里只描述了主要步骤
    end note

    note right of AbstractApplicationContext #aqua
        准备刷新的上下文环境,如加载servletContextInitParams，servletConfigInitParams配置,
        验证属性可以解析。
    end note
    AbstractApplicationContext -> AbstractApplicationContext : prepareRefresh()
    activate AbstractApplicationContext #DarkSalmon
    deactivate AbstractApplicationContext

    note right of AbstractApplicationContext #aqua
        获得DefaultListableBeanFactory
    end note
    AbstractApplicationContext -> AbstractApplicationContext : obtainFreshBeanFactory()：DefaultListableBeanFactory
    activate AbstractApplicationContext #DarkSalmon

        note right of GenericApplicationContext #aqua
            1.GenericApplicationContext时，仅设置了序列化id
            2.AbstractRefreshableApplicationContext时，如配置有xml文件，进行解析
                ---Bean定义解析，命名空间解析
        end note
        AbstractApplicationContext -> GenericApplicationContext : refreshBeanFactory()
        activate GenericApplicationContext #DarkSalmon
        GenericApplicationContext --> AbstractApplicationContext
        deactivate GenericApplicationContext

        AbstractApplicationContext -> GenericApplicationContext : getBeanFactory()
        activate GenericApplicationContext #DarkSalmon
        GenericApplicationContext --> AbstractApplicationContext
        deactivate GenericApplicationContext

    deactivate AbstractApplicationContext

    note right of AbstractApplicationContext #aqua
        填充刚才获得的DefaultListableBeanFactory，如：
            1.注册BeanPostProcessor
            2.声明忽略依赖的接口
            3.环境变量以bean的形式来记录
    end note
    AbstractApplicationContext -> AbstractApplicationContext : prepareBeanFactory()
    activate AbstractApplicationContext #DarkSalmon
    deactivate AbstractApplicationContext

    note right of AbstractApplicationContext #aqua
        允许子类进行操作DefaultListableBeanFactory
        ---提供的扩展点
    end note
    AbstractApplicationContext -> AbstractApplicationContext : postProcessBeanFactory()
    activate AbstractApplicationContext #DarkSalmon
    deactivate AbstractApplicationContext

    note right of AbstractApplicationContext #aqua
        运用BeanFactory处理器：
            I.先使用现有的BeanFactoryPostProcessor；
            II.调用postProcessBeanDefinitionRegistry()方法
                1.从所有的bean定义中查找BeanDefinitionRegistryPostProcessor类型的名称;
                2.然后先实例化BeanDefinitionRegistryPostProcessor,通过getBean()的形式实例化;
                    PriorityOrdered：最优先
                    Ordered：次优先
                    其他：最后
                3.实例化后进行排序，并注册到BeanFactory中
                4.运用实例化的BeanDefinitionRegistryPostProcessor；
                    ---ConfigurationClassPostProcessor时涉及bean定义加载(SpringBoot就是这样用的)
            III.最后执行其他普通的BeanFactoryPostProcessor.postProcessBeanFactory()方法
                ---可能设计bean属性解析
    end note
    AbstractApplicationContext -> AbstractApplicationContext : invokeBeanFactoryPostProcessors()
    activate AbstractApplicationContext #DarkSalmon

        AbstractApplicationContext -> PostProcessorRegistrationDelegate : invokeBeanFactoryPostProcessors()
        activate PostProcessorRegistrationDelegate #DarkSalmon

            PostProcessorRegistrationDelegate -> BeanDefinitionRegistryPostProcessor : postProcessBeanDefinitionRegistry()
            activate BeanDefinitionRegistryPostProcessor #DarkSalmon
            BeanDefinitionRegistryPostProcessor --> PostProcessorRegistrationDelegate
            deactivate BeanDefinitionRegistryPostProcessor

            PostProcessorRegistrationDelegate -> BeanFactoryPostProcessor : postProcessBeanFactory()
            activate BeanFactoryPostProcessor #DarkSalmon
            BeanFactoryPostProcessor --> PostProcessorRegistrationDelegate
            deactivate BeanFactoryPostProcessor

        PostProcessorRegistrationDelegate --> AbstractApplicationContext
        deactivate PostProcessorRegistrationDelegate

    deactivate AbstractApplicationContext

    note right of AbstractApplicationContext #aqua
        注册拦截bean创建的bean处理器：
            1.从所有的bean定义中查找BeanPostProcessor类型的名称;
            2.然后先实例化BeanPostProcessor,通过getBean()的形式实例化;
                PriorityOrdered：最优先
                Ordered：次优先
                其他：最后
            3.实例化后进行排序，并注册到BeanFactory中
    end note
    AbstractApplicationContext -> AbstractApplicationContext : registerBeanPostProcessors()
    activate AbstractApplicationContext #DarkSalmon

        AbstractApplicationContext -> PostProcessorRegistrationDelegate : registerBeanPostProcessors()
        activate PostProcessorRegistrationDelegate #DarkSalmon
        PostProcessorRegistrationDelegate --> AbstractApplicationContext
        deactivate PostProcessorRegistrationDelegate

    deactivate AbstractApplicationContext

    note right of AbstractApplicationContext #aqua
        初始化MessageSource,以支持国际化
    end note
    AbstractApplicationContext -> AbstractApplicationContext : initMessageSource()
    activate AbstractApplicationContext #DarkSalmon
    deactivate AbstractApplicationContext

    note right of AbstractApplicationContext #aqua
        初始化此上下文的事件多播器
    end note
    AbstractApplicationContext -> AbstractApplicationContext : initApplicationEventMulticaster()
    activate AbstractApplicationContext #DarkSalmon
    deactivate AbstractApplicationContext

    note right of AbstractApplicationContext #aqua
        子类可以初始化其他特殊的bean
            ---提供的扩展点
    end note
    AbstractApplicationContext -> AbstractApplicationContext : onRefresh()
    activate AbstractApplicationContext #DarkSalmon
    deactivate AbstractApplicationContext

    note right of AbstractApplicationContext #aqua
        注册监听器
    end note
    AbstractApplicationContext -> AbstractApplicationContext : registerListeners()
    activate AbstractApplicationContext #DarkSalmon
    deactivate AbstractApplicationContext

    note right of AbstractApplicationContext #aqua
        预实例Singleton作用域的Bean
    end note
    AbstractApplicationContext -> AbstractApplicationContext : finishBeanFactoryInitialization()
    activate AbstractApplicationContext #DarkSalmon

        AbstractApplicationContext -> DefaultListableBeanFactory : preInstantiateSingletons()
        activate DefaultListableBeanFactory #DarkSalmon
            note right of DefaultListableBeanFactory #FF5000
                预实例Singleton作用域的Bean
                单独时序图描述
            end note
        DefaultListableBeanFactory --> AbstractApplicationContext
        deactivate DefaultListableBeanFactory

    deactivate AbstractApplicationContext

    note right of AbstractApplicationContext #aqua
        发布相应的事件
    end note
    AbstractApplicationContext -> AbstractApplicationContext : finishRefresh()
    activate AbstractApplicationContext #DarkSalmon
    deactivate AbstractApplicationContext

    note right of AbstractApplicationContext #aqua
        最后收工：打扫卫生，减少资源占用
    end note
    AbstractApplicationContext -> AbstractApplicationContext : finishRefresh()
    activate AbstractApplicationContext #DarkSalmon
    deactivate AbstractApplicationContext



<-- AbstractApplicationContext
deactivate AbstractApplicationContext

note right of AbstractApplicationContext #FAEBD7
*总结
    1.在上面的步骤中重要的是bean定义加载和实例化bean；
    2.顺序很重要，规则带来秩序
        PriorityOrdered：最优先
        Ordered：次优先
        其他：最后
end note

@enduml