@startuml

autonumber

->AbstractBeanFactory:getObjectForBeanInstance()
activate AbstractBeanFactory #DarkSalmon

    note right of AbstractBeanFactory #FAEBD7
        *介绍Spring如何验证获得的bean的
        ---这里只描述了主要步骤
    end note

    note right of AbstractBeanFactory #aqua
        主要逻辑：
            1.要获取FactoryBean本身,当前缓存bean实例是NullBean直接返回；
                ---NullBean可以看做已经走过获取FactoryBean逻辑，可以区分未调用前的null与调用后的null
            2.要获取FactoryBean本身,当前缓存Bean实例非FactoryBean本身，则抛出异常：因生成与期望不符
            3.要获取FactoryBean本身,当前缓存Bean实例是一个FactoryBean,直接反回;
            4.要获取普通Bean实例，当前缓存Bean实例正好一个普通bean，直接返回；
            5.<font color=red>要获取普通Bean实例，当前缓存为FactoryBean实例，则由FactoryBean去构建；</font>
    end note

    AbstractBeanFactory->FactoryBeanRegistrySupport : getObjectFromFactoryBean()
    activate FactoryBeanRegistrySupport #DarkSalmon
        alt FactoryBean是单例的
            note right of FactoryBeanRegistrySupport #aqua
                这里有两个细节：
                    1.两次从缓存中获取，当缓存中不存在时才走以下逻辑；
                        ---理解的是在调用FactoryBean.getObject()时，中间放入缓存的情况
                    2.如果是创建中的又来获取，直接返回未经BeanPostProcess处理的对象；
                        ---第一次创建的目标对象会被BeanPostProcess处理
                    ---这两个细节，都是为了保证目标对象只被BeanPostProcess处理一次；
            end note

            FactoryBeanRegistrySupport -> FactoryBeanRegistrySupport :doGetObjectFromFactoryBean()
            activate FactoryBeanRegistrySupport #DarkSalmon

                FactoryBeanRegistrySupport -> FactoryBean : getObject()
                activate FactoryBean #DarkSalmon
                    note right of FactoryBean #aqua
                        创建bean（也可能返回NullBean）
                    end note
                FactoryBean --> FactoryBeanRegistrySupport : object
                deactivate FactoryBean

            deactivate FactoryBeanRegistrySupport

            FactoryBeanRegistrySupport -> DefaultSingletonBeanRegistry :beforeSingletonCreation()
            activate DefaultSingletonBeanRegistry #DarkSalmon

                note right of DefaultSingletonBeanRegistry #aqua
                    前置检查点
                end note

            DefaultSingletonBeanRegistry --> FactoryBeanRegistrySupport
            deactivate DefaultSingletonBeanRegistry

            FactoryBeanRegistrySupport -> AbstractAutowireCapableBeanFactory :postProcessObjectFromFactoryBean()
            activate AbstractAutowireCapableBeanFactory #DarkSalmon

                AbstractAutowireCapableBeanFactory -> AbstractAutowireCapableBeanFactory :applyBeanPostProcessorsAfterInitialization()
                activate AbstractAutowireCapableBeanFactory #DarkSalmon

                    AbstractAutowireCapableBeanFactory -> BeanPostProcessor :postProcessAfterInitialization()
                    activate BeanPostProcessor #DarkSalmon
                        note right of BeanPostProcessor #FF5000
                            Spring生成代理对象的入口之一
                                ---不常用
                        end note
                    BeanPostProcessor --> AbstractAutowireCapableBeanFactory
                    deactivate BeanPostProcessor

                deactivate AbstractAutowireCapableBeanFactory

            AbstractAutowireCapableBeanFactory --> FactoryBeanRegistrySupport
            deactivate AbstractAutowireCapableBeanFactory

            FactoryBeanRegistrySupport -> DefaultSingletonBeanRegistry :afterSingletonCreation()
            activate DefaultSingletonBeanRegistry #DarkSalmon

                note right of DefaultSingletonBeanRegistry #aqua
                    后置检查点
                end note

            DefaultSingletonBeanRegistry --> FactoryBeanRegistrySupport
            deactivate DefaultSingletonBeanRegistry

        else FactoryBean是非单例的

            FactoryBeanRegistrySupport -> FactoryBeanRegistrySupport :doGetObjectFromFactoryBean()
            activate FactoryBeanRegistrySupport #DarkSalmon

                FactoryBeanRegistrySupport -> FactoryBean : getObject()
                activate FactoryBean #DarkSalmon
                    note right of FactoryBean #aqua
                        创建bean（也可能返回NullBean）
                    end note
                FactoryBean --> FactoryBeanRegistrySupport : object
                deactivate FactoryBean

            deactivate FactoryBeanRegistrySupport

            FactoryBeanRegistrySupport -> AbstractAutowireCapableBeanFactory :postProcessObjectFromFactoryBean()
            activate AbstractAutowireCapableBeanFactory #DarkSalmon

                AbstractAutowireCapableBeanFactory -> AbstractAutowireCapableBeanFactory :applyBeanPostProcessorsAfterInitialization()
                activate AbstractAutowireCapableBeanFactory #DarkSalmon

                    AbstractAutowireCapableBeanFactory -> BeanPostProcessor :postProcessAfterInitialization()
                    activate BeanPostProcessor #DarkSalmon
                        note right of BeanPostProcessor #FF5000
                            Spring生成代理对象的入口之一
                                ---不常用
                        end note
                    BeanPostProcessor --> AbstractAutowireCapableBeanFactory
                    deactivate BeanPostProcessor

                deactivate AbstractAutowireCapableBeanFactory

            AbstractAutowireCapableBeanFactory --> FactoryBeanRegistrySupport
            deactivate AbstractAutowireCapableBeanFactory

        end

    AbstractBeanFactory<--FactoryBeanRegistrySupport : bean
    deactivate FactoryBeanRegistrySupport

<--AbstractBeanFactory : bean
deactivate AbstractBeanFactory
    note right of AbstractBeanFactory #FAEBD7
        *总结
            1.这里主要验收生成的bean是否合法，以及如果是获得FactoryBean时，而我们期望
            获得FactoryBean生成的Bean时，再进一步调用getObject()方法获取。
            2.FactoryBean在Spring基础设施生成实例中起到了重要作用。
        *备注：
            1.FactoryBeanRegistrySupport中属性字段含义：
                factoryBeanObjectCache：<bean名称,最终生成的bean>
    end note

@enduml