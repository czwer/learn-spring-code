@startuml

autonumber

-> JdkDynamicAopProxy: invoke()

note right of JdkDynamicAopProxy #FAEBD7
    *介绍JdkDynamicAopProxy代理对象方法调用
    ---这里只描述了主要步骤
end note
activate JdkDynamicAopProxy #DarkSalmon
    note right of JdkDynamicAopProxy #aqua
        I.先过滤那些不需要进行织入逻辑调用链的方法：
            1.如果调用的是equals方法，且目标对象没有重写，
                ---调用Spring重写的equels方法，并返回
            2.如果调用的是hashCode方法，且目标对象没有重写，
                ---调用Spring重写的hashCode方法，并返回
            3.如果方法声明类来自DecoratingProxy.class，
                ---获取最终的目标类Class，并返回
            4.如果代理类可以强制转换为Advised，且方法声明类是接口，
                且接口是Advised或Advised父接口
                ---通过method.invoke()反射直接调用
    end note

    note right of JdkDynamicAopProxy #aqua
        II.再执行可能需要进行织入逻辑调用链的方法
    end note
    JdkDynamicAopProxy-> AdvisedSupport:getInterceptorsAndDynamicInterceptionAdvice()：获得要织入的横切逻辑调用链
    activate AdvisedSupport #DarkSalmon
        note right of AdvisedSupport #FF5000
           准备织入逻辑
        end note
    AdvisedSupport --> JdkDynamicAopProxy
    deactivate AdvisedSupport

    alt 调用链为空
        JdkDynamicAopProxy-> AopProxyUtils:adaptArgumentsIfNecessary()：必要时入参中的数组进行转换，以满足方法签名要求
        activate AopProxyUtils #DarkSalmon
        AopProxyUtils --> JdkDynamicAopProxy
        deactivate AopProxyUtils

        JdkDynamicAopProxy-> AopUtils:invokeJoinpointUsingReflection()
        activate AopUtils #DarkSalmon
            note right of AopUtils #FF5000
               通过 method.invoke()反射直接调用
            end note
        AopUtils --> JdkDynamicAopProxy
        deactivate AopUtils

    else 存在适合的织入逻辑调用链
        note right of JdkDynamicAopProxy #aqua
            <font color=red>执行织入逻辑调用链：</font>
                <font color=red>1.把当前上下文包装成Joinpoint的实现类ReflectiveMethodInvocation。</font>
                    <font color=red>---Joinpoint为执行点</font>
                <font color=red>2.执行方法调用proceed()方法；</font>
                    <font color=red>---该方法内部涉及织入逻辑调用链和目标方法的执行；</font>
        end note
        JdkDynamicAopProxy-> ReflectiveMethodInvocation:proceed()
        activate ReflectiveMethodInvocation #DarkSalmon
            note right of ReflectiveMethodInvocation #FF5000
                AOP生效重点:运用织入逻辑
                ---单独时序图说明
            end note
        ReflectiveMethodInvocation --> JdkDynamicAopProxy
        deactivate ReflectiveMethodInvocation

    end

<-- JdkDynamicAopProxy : result
deactivate JdkDynamicAopProxy

note right of JdkDynamicAopProxy #FAEBD7
*总结
    1.尽可能的简单处理，不得已的时候再进行真正含织入逻辑的调用。
    <font color=red>2.代理对象在第一次方法运行获取织入逻辑链后，予以缓存；</font>
        <font color=red>---Spring性能优化点之一</font>

*备注
    1.x.class.isAssignableFrom(y.getClass())：当x是y的父类，或同类时返回true
    2.method.getDeclaringClass():
        1.如果method是从接口或抽象类获得的，返回定义该方法的接口或抽象类Class
        2.如果method是从普通类中获得的，返回该普通类Class
    3.z.class.isInstance(new w())，用来判断对象w是否是z类的实例
    4.advised.isOpaque(): 用于控制的代理类是否可以强制转换成Advised,默认为false,表示可以转换

end note

@enduml