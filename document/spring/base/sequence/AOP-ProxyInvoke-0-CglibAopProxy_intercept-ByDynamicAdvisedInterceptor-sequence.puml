@startuml

autonumber

-> proxyObject: 代理对象开始被调用

note right of proxyObject #FAEBD7
    *介绍CglibAopProxy生成的代理类，执行方法时用
    DynamicAdvisedInterceptor类型的Callback调用过程;
        ---这里只描述了主要步骤
    单元测试参：CglibProxyTests
end note
activate proxyObject #DarkSalmon

    proxyObject -> DynamicAdvisedInterceptor : intercept()
    activate DynamicAdvisedInterceptor #DarkSalmon

        note right of DynamicAdvisedInterceptor #aqua
            获得匹配当前方法的织入逻辑调用链
        end note

        DynamicAdvisedInterceptor -> AdvisedSupport: getInterceptorsAndDynamicInterceptionAdvice()
        activate AdvisedSupport #DarkSalmon
        AdvisedSupport --> DynamicAdvisedInterceptor : chain
        deactivate AdvisedSupport

        alt 没有织入逻辑调用链，同时也是public类型方法

            DynamicAdvisedInterceptor -> MethodProxy: invoke()
            activate MethodProxy #DarkSalmon
                note right of MethodProxy #FF5000
                    直接反射调用
                end note
            MethodProxy --> DynamicAdvisedInterceptor : chain
            deactivate MethodProxy

        else

            note right of DynamicAdvisedInterceptor #aqua
                把上下文信息转换为CglibMethodInvocation
            end note

            DynamicAdvisedInterceptor -> CglibMethodInvocation : proceed()
            activate CglibMethodInvocation #DarkSalmon
                CglibMethodInvocation -> ReflectiveMethodInvocation : proceed()
                activate ReflectiveMethodInvocation #DarkSalmon
                    note right of ReflectiveMethodInvocation #FF5000
                        这里和JDK动态代理运行时共用同样的基础设施，仅在最终调用
                        目标方法时使用CglibMethodInvocation.invokeJoinpoint(),以
                        提高性能
                    end note
                CglibMethodInvocation --> ReflectiveMethodInvocation
                deactivate ReflectiveMethodInvocation
            CglibMethodInvocation --> DynamicAdvisedInterceptor
            deactivate CglibMethodInvocation
        end

    DynamicAdvisedInterceptor --> proxyObject : result
    deactivate DynamicAdvisedInterceptor


<-- proxyObject : result
deactivate proxyObject

note right of proxyObject #FAEBD7
    *总结
        <font color=red>1.代理对象执行时：把当前Callback(实际是DynamicAdvisedInterceptor)转换为CglibMethodInvocation，</font>
            <font color=red>而CglibMethodInvocation本身是ReflectiveMethodInvocation子类，所以我们可以直接调用</font>
            <font color=red>ReflectiveMethodInvocation.proceed()方法，以达到和JDK动态代理一样的方式共享Spring AOP</font>
            <font color=red>框架基础设施；</font>
            <font color=red>---DynamicAdvisedInterceptor在生成代理时就已经获得了AOP上下文，运行时可以使用，是很自然的事；</font>
        <font color=red>2.代理对象在第一次运行获取织入逻辑链后，予以缓存，提高了性能；</font>
            <font color=red>---以上Spring的优化点</font>
        <font color=red>3.DynamicAdvisedInterceptor是常用类型的Callback；</font>
    *备注
        1.CglibMethodInvocation是ReflectiveMethodInvocation子类，是Cglib通往Spring AOP的桥梁。
end note
@enduml