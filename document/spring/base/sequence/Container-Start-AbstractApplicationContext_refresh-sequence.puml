@startuml

autonumber

-> AbstractApplicationContext: refresh()
activate AbstractApplicationContext #DarkSalmon

    note right of AbstractApplicationContext #FAEBD7
        *介绍Spring容器启动的主要步骤
        ---这里只描述了主要步骤
    end note

    note right of AbstractApplicationContext #aqua
        准备刷新的上下文环境,如加载servletContextInitParams，servletConfigInitParams配置,
        验证属性可以解析。
    end note
    AbstractApplicationContext -> AbstractApplicationContext : prepareRefresh()
    activate AbstractApplicationContext #DarkSalmon
    deactivate AbstractApplicationContext

    note right of AbstractApplicationContext #aqua
        获得DefaultListableBeanFactory
    end note
    AbstractApplicationContext -> AbstractApplicationContext : obtainFreshBeanFactory()：DefaultListableBeanFactory
    activate AbstractApplicationContext #DarkSalmon

        note right of GenericApplicationContext #aqua
            1.GenericApplicationContext时，仅设置了序列化id
            2.AbstractRefreshableApplicationContext时，如配置有xml文件，进行解析
            ---加载Bean定义的入口之一，xml版
        end note
        AbstractApplicationContext -> GenericApplicationContext : refreshBeanFactory()
        activate GenericApplicationContext #DarkSalmon
        GenericApplicationContext --> AbstractApplicationContext
        deactivate GenericApplicationContext

        AbstractApplicationContext -> GenericApplicationContext : getBeanFactory()
        activate GenericApplicationContext #DarkSalmon
        GenericApplicationContext --> AbstractApplicationContext
        deactivate GenericApplicationContext

    deactivate AbstractApplicationContext

    note right of AbstractApplicationContext #aqua
        主要是注册基础组件
            1.注册基础组件StandardBeanExpressionResolver：Spring EL表达式
            2.初始化ResourceEditorRegistrar：用于注册ResourceEditor
            3.注册基础组件ApplicationContextAwareProcessor：初始化前织入xxxAware定义的资源
            4.注册忽略依赖检查和自动装配的接口
            5.把当前容器以资源加载，事件发布等设置到自身，以便后面上下文中使用
            6.注册基础组件ApplicationListenerDetector：用于检测实现了ApplicationListener的Bean
            7.以bean实例的方式，记录当前环境变量
    end note
    AbstractApplicationContext -> AbstractApplicationContext : prepareBeanFactory()
    activate AbstractApplicationContext #DarkSalmon
    deactivate AbstractApplicationContext

    note right of AbstractApplicationContext #aqua
        允许子类进行操作DefaultListableBeanFactory
        ---提供的扩展点
    end note
    AbstractApplicationContext -> AbstractApplicationContext : postProcessBeanFactory()
    activate AbstractApplicationContext #DarkSalmon
    deactivate AbstractApplicationContext


    AbstractApplicationContext -> AbstractApplicationContext : invokeBeanFactoryPostProcessors()
    activate AbstractApplicationContext #DarkSalmon
        note right of AbstractApplicationContext #aqua
            使用BeanFactory处理器工厂注册Bean定义及预处理Bean定义：
                I.先使用现有的BeanFactoryPostProcessor；
                II.调用postProcessBeanDefinitionRegistry()方法
                    1.从所有的bean定义中查找BeanDefinitionRegistryPostProcessor类型的名称;
                    2.然后先实例化BeanDefinitionRegistryPostProcessor,通过getBean()的形式实例化;
                        优先级：PriorityOrdered > Ordered > 其他
                    3.实例化后进行排序，并注册到BeanFactory中
                    4.运用实例化的BeanDefinitionRegistryPostProcessor.postProcessBeanDefinitionRegistry()；
                    ---ConfigurationClassPostProcessor：加载Bean定义的入口之一，注解版
                III.最后执行其他普通的BeanFactoryPostProcessor.postProcessBeanFactory()方法
                    ---SharedMetadataReaderFactoryContextInitializer：没有做什么
                    ---ConfigurationClassPostProcessor：
                        1.设置bean定义中一些公共变量，
                        2.一般替换成Cglib生成的Class
                        3.注册基础设施ImportAwareBeanPostProcessor
                    ---PropertySourcesPlaceholderConfigurer：占位符的解析
                    ---ConfigurationBeanFactoryMetadata：预找出使用工厂方法创建的bean
        end note

        AbstractApplicationContext -> PostProcessorRegistrationDelegate : invokeBeanFactoryPostProcessors()
        activate PostProcessorRegistrationDelegate #DarkSalmon

            PostProcessorRegistrationDelegate -> BeanDefinitionRegistryPostProcessor : postProcessBeanDefinitionRegistry()
            activate BeanDefinitionRegistryPostProcessor #DarkSalmon
            BeanDefinitionRegistryPostProcessor --> PostProcessorRegistrationDelegate
            deactivate BeanDefinitionRegistryPostProcessor

            PostProcessorRegistrationDelegate -> BeanFactoryPostProcessor : postProcessBeanFactory()
            activate BeanFactoryPostProcessor #DarkSalmon
            BeanFactoryPostProcessor --> PostProcessorRegistrationDelegate
            deactivate BeanFactoryPostProcessor

        PostProcessorRegistrationDelegate --> AbstractApplicationContext
        deactivate PostProcessorRegistrationDelegate

    deactivate AbstractApplicationContext

    AbstractApplicationContext -> AbstractApplicationContext : registerBeanPostProcessors()
    activate AbstractApplicationContext #DarkSalmon
        note right of AbstractApplicationContext #aqua
            <font color=red>注册并实例化bean处理器：</font>
                1.从所有的bean定义中查找BeanPostProcessor类型的名称;
                2.然后先实例化BeanPostProcessor,通过getBean()的形式实例化;
                   优先级：PriorityOrdered > Ordered > 其他
                3.实例化后进行排序，并注册到BeanFactory中
        end note

        AbstractApplicationContext -> PostProcessorRegistrationDelegate : registerBeanPostProcessors()
        activate PostProcessorRegistrationDelegate #DarkSalmon
        PostProcessorRegistrationDelegate --> AbstractApplicationContext
        deactivate PostProcessorRegistrationDelegate

    deactivate AbstractApplicationContext

    note right of AbstractApplicationContext #aqua
        初始化MessageSource,以支持国际化
    end note
    AbstractApplicationContext -> AbstractApplicationContext : initMessageSource()
    activate AbstractApplicationContext #DarkSalmon
    deactivate AbstractApplicationContext

    note right of AbstractApplicationContext #aqua
        初始化此上下文的事件多播器
    end note
    AbstractApplicationContext -> AbstractApplicationContext : initApplicationEventMulticaster()
    activate AbstractApplicationContext #DarkSalmon
    deactivate AbstractApplicationContext

    note right of AbstractApplicationContext #aqua
        子类可以初始化其他特殊的bean
            ---提供的扩展点
    end note
    AbstractApplicationContext -> AbstractApplicationContext : onRefresh()
    activate AbstractApplicationContext #DarkSalmon
    deactivate AbstractApplicationContext

    note right of AbstractApplicationContext #aqua
        注册监听器
    end note
    AbstractApplicationContext -> AbstractApplicationContext : registerListeners()
    activate AbstractApplicationContext #DarkSalmon
    deactivate AbstractApplicationContext


    AbstractApplicationContext -> AbstractApplicationContext : finishBeanFactoryInitialization()
    activate AbstractApplicationContext #DarkSalmon

        AbstractApplicationContext -> DefaultListableBeanFactory : preInstantiateSingletons()
        activate DefaultListableBeanFactory #DarkSalmon
            note right of DefaultListableBeanFactory #FF5000
                预实例Singleton作用域的Bean
                单独时序图描述
            end note
        DefaultListableBeanFactory --> AbstractApplicationContext
        deactivate DefaultListableBeanFactory

    deactivate AbstractApplicationContext

    note right of AbstractApplicationContext #aqua
        发布相应的事件
    end note
    AbstractApplicationContext -> AbstractApplicationContext : finishRefresh()
    activate AbstractApplicationContext #DarkSalmon
    deactivate AbstractApplicationContext

    note right of AbstractApplicationContext #aqua
        最后收工：打扫卫生，减少资源占用
    end note
    AbstractApplicationContext -> AbstractApplicationContext : finishRefresh()
    activate AbstractApplicationContext #DarkSalmon
    deactivate AbstractApplicationContext



<-- AbstractApplicationContext
deactivate AbstractApplicationContext

note right of AbstractApplicationContext #FAEBD7
*总结
    1.主要围绕以下几点：
        a.注册基础组件；
        b.Bean定义加载与预处理；
        c.注册并实例化BeanPostProcessor；
        d.实例化非延迟加载的Bean；
        ---顺序很重要，规则带来秩序；
end note

@enduml