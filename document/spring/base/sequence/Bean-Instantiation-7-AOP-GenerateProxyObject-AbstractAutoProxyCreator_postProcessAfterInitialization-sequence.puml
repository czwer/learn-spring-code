@startuml

autonumber

->AbstractAutoProxyCreator : postProcessAfterInitialization()
activate AbstractAutoProxyCreator #DarkSalmon
    note right of AbstractAutoProxyCreator #FAEBD7
        *介绍生成代理主要步骤
        ---这里只描述了主要步骤
    end note

    AbstractAutoProxyCreator -> AbstractAutoProxyCreator: wrapIfNecessary()
    activate AbstractAutoProxyCreator #DarkSalmon

        note right of AbstractAutoProxyCreator #aqua
            I.先判断不生成代理的逻辑：
                1.有名字，在已处理名单中包含了，直接返回原bean
                2.已核实过不需要处理的记录中包含了，直接返回原bean
                3.beanClass是基础设施类型||bean属于需要跳过的部分，记录到advisedBeans，直接返回原bean
            II.下面是生成代理的逻辑：
        end note
        AbstractAutoProxyCreator->AbstractAdvisorAutoProxyCreator : getAdvicesAndAdvisorsForBean()
        activate AbstractAdvisorAutoProxyCreator #DarkSalmon

            note right of AbstractAdvisorAutoProxyCreator #aqua
                查找符合当前bean适用的Advisor；
                ---单独时序图说明
            end note

            AbstractAdvisorAutoProxyCreator->AbstractAdvisorAutoProxyCreator : findEligibleAdvisors()
            activate AbstractAdvisorAutoProxyCreator #DarkSalmon


            deactivate AbstractAdvisorAutoProxyCreator

        AbstractAdvisorAutoProxyCreator --> AbstractAutoProxyCreator : Object[] specificInterceptors
        deactivate AbstractAdvisorAutoProxyCreator

        alt
        AbstractAutoProxyCreator->AbstractAutoProxyCreator : createProxy() 创建代理
        activate AbstractAutoProxyCreator #DarkSalmon

            note right of AbstractAutoProxyCreator #aqua
                创建代理；
                    1.当BeanFactory为类型ConfigurableListableBeanFactory时，
                        在Bean定义中记录原始Class信息
                    2.创建ProxyFactory，并拷贝AbstractAutoProxyCreator的
                        ProxyConfig信息给ProxyFactory
                    3.确定用Cglib还是JDK方式生成代理,默认是Cglib：设置
                        proxyTargetClass属性，如存在父接口，记录到当前proxyFactory
            end note

            AbstractAutoProxyCreator->AbstractAutoProxyCreator : buildAdvisors() :如存在公共的Advisor也要放入Advisor链中，并统一转换成Advisor来处理
            activate AbstractAutoProxyCreator #DarkSalmon
            deactivate AbstractAutoProxyCreator

            AbstractAutoProxyCreator->AbstractAutoProxyCreator : customizeProxyFactory() :提供的扩展点，可以对ProxyFactory进行操作
            activate AbstractAutoProxyCreator #DarkSalmon
            deactivate AbstractAutoProxyCreator


            note right of ProxyFactory #FF5000
               生成代理对象
               ---单独时序图说明
            end note
            AbstractAutoProxyCreator ->ProxyFactory :getProxy()
            activate ProxyFactory #DarkSalmon
            ProxyFactory ->AbstractAutoProxyCreator :proxyObject
            deactivate ProxyFactory

        deactivate AbstractAutoProxyCreator

    deactivate AbstractAutoProxyCreator



<--AbstractAutoProxyCreator : proxyObject
deactivate AbstractAutoProxyCreator
    note right of AbstractAutoProxyCreator #FAEBD7
        *总结
            1.整个逻辑是查找适用的Advisor，并通过ProxyFactory生成代理对象；
            2.BeanPostProcessor(具体为AbstractAutoProxyCreator)+ProxyFactory是
                Spring IoC和AOP体系打通的关键
                ---AbstractAutoProxyCreator再具体下面二者之一：
                    InfrastructureAdvisorAutoProxyCreator：传统方式
                    AnnotationAwareAspectJAutoProxyCreator：使用AspectJ形式注解时，同时也支持传统方式
            3.这里用SingletonTargetSource来包装目标对象。

        *备注：
            AbstractAutoProxyCreator属性含义
                earlyProxyReferences：[提前暴露的代理对象引用]
                advisedBeans：<cacheKey,false> 记录的是核实过不需要处理的缓存名称
                proxyTypes：<cacheKey,代理的class> 记录生成的代理Class类型
                targetSourcedBeans：[记录生成过代理的bean名称]；

    end note

@enduml