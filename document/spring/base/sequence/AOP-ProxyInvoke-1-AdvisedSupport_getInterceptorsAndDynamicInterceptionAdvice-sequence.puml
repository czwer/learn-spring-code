@startuml
-> AdvisedSupport : getInterceptorsAndDynamicInterceptionAdvice()
activate AdvisedSupport #DarkSalmon

note right of AdvisedSupport #FAEBD7
    *介绍方法获得要织入的逻辑(Advice)
    ---这里只描述了主要步骤
end note
    alt 缓存获取不到时，才重新组装
        AdvisedSupport -> DefaultAdvisorChainFactory : getInterceptorsAndDynamicInterceptionAdvice()
        activate DefaultAdvisorChainFactory #DarkSalmon
            DefaultAdvisorChainFactory -> DefaultAdvisorChainFactory : hasMatchingIntroductions()：首先确定是否存在匹配的IntroductionAdvisor
            activate DefaultAdvisorChainFactory #DarkSalmon
            deactivate DefaultAdvisorChainFactory

            loop Advisor advisor : config.getAdvisors()

                alt advisor是PointcutAdvisor类型实例

                    alt 如果允许跳过ClassFilter匹配或ClassFilter匹配结果是通过的

                        DefaultAdvisorChainFactory -> DefaultAdvisorAdapterRegistry :getInterceptors()
                        activate DefaultAdvisorAdapterRegistry #DarkSalmon
                            note right of DefaultAdvisorAdapterRegistry #FF5000
                                获取advisor中的MethodInterceptor，不同类型的Advisor由xxxAdvisorAdapter来协助把内部xxxAdvice
                                转换成统一的MethodInterceptor接口类型
                                    AfterReturningAdviceAdapter -> AfterReturningAdvice -> AfterReturningAdviceInterceptor -> MethodInterceptor
                                    MethodBeforeAdviceAdapter -> MethodBeforeAdvice -> MethodBeforeAdviceInterceptor -> MethodInterceptor
                                    ThrowsAdviceAdapter -> ThrowsAdvice -> ThrowsAdviceInterceptor -> MethodInterceptor
                                    ---Spring设计亮点
                            end note
                        DefaultAdvisorAdapterRegistry --> DefaultAdvisorChainFactory :MethodInterceptor[] interceptors
                        deactivate DefaultAdvisorAdapterRegistry

                        DefaultAdvisorChainFactory -> MethodMatchers :matches()
                        activate MethodMatchers #DarkSalmon
                            note right of MethodMatchers #aqua
                                最终委托MethodMatcher实现类来匹配
                            end note
                        MethodMatchers --> DefaultAdvisorChainFactory :boolean
                        deactivate MethodMatchers

                        alt 如果MethodMatchers匹配结果是通过的
                            note right of DefaultAdvisorChainFactory #aqua
                                添加到返回结果中，注意对IntroductionAwareMethodMatcher和
                                普通MethodMatcher分开处理的。
                            end note
                        end

                    end

                else advisor是IntroductionAdvisor类型实例

                    alt 如果允许跳过ClassFilter匹配或ClassFilter匹配结果是通过的
                        note right of DefaultAdvisorChainFactory #aqua
                            添加到返回结果中
                        end note
                    end

                else 默认处理行为
                    note right of DefaultAdvisorChainFactory #aqua
                        默认当前advisor的Intercepter都是适用的，添加到返回结果中
                    end note
                end

            end

        DefaultAdvisorChainFactory --> AdvisedSupport : getInterceptorsAndDynamicInterceptionAdvice()
        deactivate DefaultAdvisorChainFactory

    end

<-- AdvisedSupport: List<Object>
deactivate AdvisedSupport

note right of AdvisedSupport #FAEBD7
*总结
    1.在确定是否存在匹配的IntroductionAdvisor时，是在for循环前调用，避免在后面for循环中重复运行
    2.我们发现相应不管是前置，后置，异常通知，都能转换成MethodInterceptor的形式，便于框架统一的方式处理

*备注
    1.IntroductionAdvisor: 只运用于类级别的拦截，只能用于Introduction型的Advice
    2.PointcutAdvisor: 运用任何类型的Pointcut，差不多任何类型的Advice
    3.Advised.preFiltered：用于跳过ClassFilter.matches
    4.MethodMatcher.isRuntime：
        false: 当前是StaticMethodMatcher类型，不考虑方法入参
        true: 当前是DynamicMethodMatcher类型，考虑方法入参
end note

@enduml