@startuml

autonumber

-> CglibAopProxy: getProxy() : 生成代理对象

note left of CglibAopProxy #FAEBD7
    *介绍CglibAopProxy生成代理过程
        ---这里只描述了主要步骤
     单元测试参：CglibProxyTests
end note
activate CglibAopProxy #DarkSalmon
    alt 目标类的Class本身已是CglibProxyClass
        note right of CglibAopProxy #aqua
            获取父类；
        end note
    end

    note right of CglibAopProxy #aqua
        创建Enhancer
    end note

    CglibAopProxy-> AopProxyUtils:completeProxiedInterfaces()
    activate AopProxyUtils #DarkSalmon
        note right of CglibAopProxy #aqua
            获得实现的接口,
                ---在生成JDK代理时，如果接口没有在SpringProxy，Advised族中，
                会添加这2个接口
        end note
    AopProxyUtils-> CglibAopProxy:Class<?>[] proxiedInterfaces
    deactivate AopProxyUtils

    note right of CglibAopProxy #aqua
        设置Enhancer属性
            a.设置产生的代理对象的父类
            b.命名策略（防止与其他框架冲突）
            c.组装要用到的Callback数组，为ProxyCallbackFilter准备素材
                ---为符合Cglig规范，在调用ProxyCallbackFilter.accept(Method method)时，
                返回方法匹配的Callback数组索引。
            d.设置方法回调过滤器
            e.设置callbackType
    end note

    CglibAopProxy -> CglibAopProxy : getCallbacks()
    activate CglibAopProxy #DarkSalmon
    deactivate CglibAopProxy

    CglibAopProxy -> ObjenesisCglibAopProxy : createProxyClassAndInstance()：创建代理实例
    activate ObjenesisCglibAopProxy #DarkSalmon

        ObjenesisCglibAopProxy -> Enhancer : createClass()：创建待生成代理的Class对象
        activate Enhancer #DarkSalmon
            note right of Enhancer #aqua
                1.通过ProxyCallbackFilter.accept()方法，
                    返回方法适用的Callback索引
                ---这里只描述了重点
            end note

            Enhancer -> ProxyCallbackFilter : accept()：
            activate ProxyCallbackFilter #DarkSalmon
            ProxyCallbackFilter --> Enhancer
            deactivate ProxyCallbackFilter

        Enhancer --> ObjenesisCglibAopProxy
        deactivate Enhancer

        note right of SpringObjenesis #FF5000
            生成代理对象
            ---Objenesis特性：不要求有构造函数
        end note

        ObjenesisCglibAopProxy -> SpringObjenesis : newInstance()：
        activate SpringObjenesis #DarkSalmon
        SpringObjenesis --> ObjenesisCglibAopProxy
        deactivate SpringObjenesis

        note right of ObjenesisCglibAopProxy #FF5000
            1.如果Objenesis方式没有创建成功，采用传统方式创建;
            2.设置Callback到生成的代理对象中，真正调用时才发挥真正作用
        end note


    ObjenesisCglibAopProxy --> CglibAopProxy
    deactivate ObjenesisCglibAopProxy



<-- CglibAopProxy : proxyObject
deactivate CglibAopProxy

note right of CglibAopProxy #FAEBD7
*总结
    1.通过Callback中包含advised，把Cglib和Spring AOP基础设施融合，以便后期代理运行时使用Spring AOP框架的基础设施；
        ---在CglibAopProxy定义了多个内部类形式的Callback，它们都实现了Cglib的MethodInterceptor接口，
        有的Callback可以提升系统性能；
    2.通过enhancer中设置ProxyCallbackFilter，决定方法使用哪个Callback,分配的原则根据：方法信息+advised配置信息
        <font color=red>---使用时为每个方法确认过对应的织入调用链，并予以缓存，是Cglib的优化点之一</font>
        <font color=red>---JDK是代理对象第一次运行时才予以缓存，所以第一次访问会慢</font>
        <font color=red>---以上也表明类级别与方法级别上的差距，颗粒度越细，性能越好</font>
*备注
    1.x.class.getInterfaces：返回x所实现的接口
    2.WeakHashMap：将一对key, value放入到 WeakHashMap 里并不能避免该key值被GC回收，
        除非在 WeakHashMap 之外还有对该key的强引用。
    3.TargetSource.isStatic(): 用于表明是否要返回同一个目标对象实例,true代表返回同一对象
    4.advised.isExposeProxy(): 是否将当前代理对象绑定到ThreadLocal，默认为false
    5.advised.isFrozen(): 代理对象生成的各项配置信息配置完成，是否容许更改,默认为false
    6.advised.isOpaque(): 用于控制的代理类是否可以强制转换成Advised,默认为false,表示可以
    7.net.sf.cglib.proxy.NoOp NoOp回调把对方法调用直接委派到这个方法在父类中的实现。
    8.判断是否是CglibProxyClass依据是className中是否包含$$
    9.<font color=red>注意两种不同MethodInterceptor，阅读代码时注意上下文，此时是后者</font>
        <font color=red>org.aopalliance.intercept.MethodInterceptor：环绕通知</font>
        <font color=red>org.springframework.cglib.proxy.MethodInterceptor：Cglib中Callback的子接口</font>
*参考：
    CGLIB学习笔记：https://www.cnblogs.com/shijiaqi1066/p/3429691.html
end note

@enduml