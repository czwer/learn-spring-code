@startuml
-> AbstractPlatformTransactionManager: getTransaction(TransactionDefinition definition)
activate AbstractPlatformTransactionManager #DarkSalmon

note left of AbstractPlatformTransactionManager #FAEBD7
    *介绍获取事务状态的方法
        ---模板方法调用实现，以DataSourceTransactionManager为例
        ---这里只描述了主要步骤
end note

    AbstractPlatformTransactionManager -> DataSourceTransactionManager : doGetTransaction()
    activate DataSourceTransactionManager #DarkSalmon
        note right of DataSourceTransactionManager #aqua
            获取绑定的资源，包装后返回。
        end note

    DataSourceTransactionManager --> AbstractPlatformTransactionManager : dataSourceTransactionObject
    deactivate DataSourceTransactionManager

    alt definition == null
        note right of AbstractPlatformTransactionManager #aqua
            创建一个默认的事务定义数据
        end note
    end

    AbstractPlatformTransactionManager -> DataSourceTransactionManager : isExistingTransaction()
    activate DataSourceTransactionManager #DarkSalmon
        note right of DataSourceTransactionManager #aqua
            存在连接，且连接中的事务是活的
        end note
    DataSourceTransactionManager --> AbstractPlatformTransactionManager
    deactivate DataSourceTransactionManager

    alt 存在事务
        note right of AbstractPlatformTransactionManager #aqua
            存在事务时，创建一个TransactionStatus。
            PROPAGATION_NEVER：抛出异常
            PROPAGATION_NOT_SUPPORTED：当前事务挂起
            PROPAGATION_REQUIRES_NEW：当前事务挂起，创建新事务
            PROPAGATION_NESTED：在当前事务，开启一个嵌套事务
                ---嵌套事务默认基于Savepoint实现，其他JTA
            PROPAGATION_SUPPORTS：加入当前事务
            PROPAGATION_REQUIRED：加入当前事务
            ---存在事务时，实现事务传播行为的语义
        end note

        AbstractPlatformTransactionManager -> AbstractPlatformTransactionManager : handleExistingTransaction()
        activate AbstractPlatformTransactionManager #DarkSalmon
        deactivate AbstractPlatformTransactionManager
<-- AbstractPlatformTransactionManager: transactionStatus
    end

    note right of AbstractPlatformTransactionManager #aqua
        ---不存在事务时，实现事务传播行为的语义
    end note

    alt 当前事务传播行为是PROPAGATION_MANDATORY：强制要求当前存在一个事务，如不存在抛出异常
        note right of AbstractPlatformTransactionManager #aqua
            ---当前是不存在事务：
                PROPAGATION_MANDATORY：强制要求当前存在一个事务，如果不存在，则抛出异常
                ---实现了该语义
        end note
        <-- AbstractPlatformTransactionManager: throw new IllegalTransactionStateException()
    else 如果当前事务传播行为属于其中之一：PROPAGATION_REQUIRED，PROPAGATION_REQUIRES_NEW，PROPAGATION_NESTED
        note right of AbstractPlatformTransactionManager #aqua
            ---当前是不存在事务：
                PROPAGATION_REQUIRED：创建一个新的事务
                PROPAGATION_REQUIRES_NEW：当前事务挂起，并创建一个新的事务
                PROPAGATION_NESTED：创建一个新的事务
                    ---实现了该语义
        end note

        AbstractPlatformTransactionManager -> AbstractPlatformTransactionManager : suspend():暂停事务
        activate AbstractPlatformTransactionManager #DarkSalmon
        deactivate AbstractPlatformTransactionManager

        AbstractPlatformTransactionManager -> AbstractPlatformTransactionManager : newTransactionStatus():创建新的事务状态
        activate AbstractPlatformTransactionManager #DarkSalmon
        deactivate AbstractPlatformTransactionManager

        AbstractPlatformTransactionManager -> DataSourceTransactionManager : doBegin()：根据事务定义创建新的事务
        activate DataSourceTransactionManager #DarkSalmon
            note right of DataSourceTransactionManager #aqua
                主要做的是获取连接，标记事务相关参数，绑定到ThreadLocal中
            end note
        DataSourceTransactionManager --> AbstractPlatformTransactionManager
        deactivate DataSourceTransactionManager

        AbstractPlatformTransactionManager -> DataSourceTransactionManager : prepareSynchronization()：根据需要初始化事务同步
        activate DataSourceTransactionManager #DarkSalmon
        DataSourceTransactionManager --> AbstractPlatformTransactionManager
        deactivate DataSourceTransactionManager
    else
        note right of AbstractPlatformTransactionManager #aqua
            ---当前是不存在事务：
                PROPAGATION_NEVER：永远不需要当前存在事务
                PROPAGATION_NOT_SUPPORTED：不支持当前事务，而是在没有事务的情况下执行
                PROPAGATION_SUPPORTS：直接执行
                ---实现了该语义
        end note
        AbstractPlatformTransactionManager -> AbstractPlatformTransactionManager : prepareTransactionStatus():创建事务状态
        activate AbstractPlatformTransactionManager #DarkSalmon
        deactivate AbstractPlatformTransactionManager

    end

<-- AbstractPlatformTransactionManager: transactionStatus
deactivate AbstractPlatformTransactionManager

note right of AbstractPlatformTransactionManager #FAEBD7
    *总结
        1.实现了事务传播行为的语义；
        2.挂起的意味着，从当前线程中解除绑定资源，就提交不了事务，达到了挂起的目的；
        3.如业务中存在挂起的行为，返回的对象中包含了挂起的前的所有信息；
        4.为了方便理解代码，我们先假设在调用上下文中第一次开始事务，同时考虑多件事难度大些；

    *事务的传播行为
        PROPAGATION_MANDATORY：强制要求当前存在一个事务，如果不存在，则抛出异常；
        PROPAGATION_NESTED：如果存在当前事务，则在当前事务的一个嵌套事务中执行，否则创建新的事务；
            ---内部子事务
        PROPAGATION_NEVER：永远不需要当前存在事务，如果存在事务，则抛出异常；
        PROPAGATION_NOT_SUPPORTED：不支持当前事务，而是在没有事务的情况下执行。如果当前存在事务，当前事务挂起；
        PROPAGATION_SUPPORTS：如果当前存在事务，则加入当前事务。如果当前不存在事务，则直接执行；
        PROPAGATION_REQUIRED：如果当前存在事务，则加入当前事务。如果不存在任何事务，则创建一个新的事务；
        PROPAGATION_REQUIRES_NEW：不管当前是否存在事务，都会创建新的事务。如果当前存在事务，会将当前事务挂起；
            ---平级关系
    *savepoint：
        它是当前事务中的一个点，可以从Connection.rollback方法引用。 当事务回滚到保存点时，保存点后所做的所有更改都将被撤消。
end note

@enduml